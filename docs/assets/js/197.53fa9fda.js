(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{483:function(e,n,r){"use strict";r.r(n);var s=r(10),a=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"heroku-postgresql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#heroku-postgresql"}},[e._v("#")]),e._v(" Heroku PostgreSQL")]),e._v(" "),n("p",[e._v("在 Heroku App 建立 Postgres DB")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('heroku addons:create heroku-postgresql:hobby-dev\n\n\nAlanJui at MacBook-Pro.local in [~/workspace/VS2017/docker-01]  on git:master ✔︎  487c670 "將 Dockerfile 分成：（1）在 Local 端用（使用檔案：Dockerfile.local）；（2）佈署到 Heroku 用（使用檔案：Dockerfile）"\n22:54:57 $ heroku addons:create heroku-postgresql:hobby-dev\nCreating heroku-postgresql:hobby-dev on ⬢ ccc-asp-net-core-app... free\nDatabase has been created and is available\n ! This database is empty. If upgrading, you can transfer\n ! data from another database with pg:copy\nCreated postgresql-flat-70920 as DATABASE_URL\nUse heroku addons:docs heroku-postgresql to view documentation\n')])])]),n("p",[e._v("取得 Connect String")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ heroku config -s | grep DATABASE_URL\nDATABASE_URL='postgres://izpjdgcbadslqy:1cebb52a07a3a071a4ae7b9518abcb6c19d04acfb51bdb9fd5482305d54111b7@ec2-54-163-254-143.compute-1.amazonaws.com:5432/depjqafb66e6rb'\n")])])]),n("p",[e._v("取得 Postgres DB 資訊")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ heroku pg:info\n=== DATABASE_URL\nPlan:        Hobby-dev\nStatus:      Available\nConnections: 0/20\nPG Version:  9.6.2\nCreated:     2017-07-13 14:55 UTC\nData Size:   7.2 MB\nTables:      0\nRows:        0/10000 (In compliance)\nFork/Follow: Unsupported\nRollback:    Unsupported\nAdd-on:      postgresql-flat-70920\n")])])]),n("p",[e._v("為  Postgres DB 做健康檢查")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ heroku pg:diagnose\nReport 4c04b58e-89c1-437d-8f45-4bb457403513 for ccc-asp-net-core-app::DATABASE_URL\navailable for one month after creation on 2017-07-13T15:03:32.881287+00:00\n\nGREEN: Connection Count\nGREEN: Long Queries\nGREEN: Idle in Transaction\nGREEN: Indexes\nGREEN: Bloat\nGREEN: Hit Rate\nGREEN: Blocking Queries\nGREEN: Sequences\nSKIPPED: Load\nError Load check not supported on this plan\n")])])]),n("p",[e._v("Local 設定")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('$ export DATABASE_URL=postgres:///$(whoami)\n\n$ echo $DATABASE_URL\npostgres:///AlanJui\n\n$ psql -h localhost\npsql (9.6.3)\nType "help" for help.\n\nAlanJui=# \\q\n')])])]),n("p",[e._v("執行 Heroku PostgreSQL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ heroku pg:psql\n--\x3e Connecting to postgresql-flat-70920\npsql (9.6.3, server 9.6.2)\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nccc-asp-net-core-app::DATABASE=> CREATE TABLE public.users\nccc-asp-net-core-app::DATABASE-> (\nccc-asp-net-core-app::DATABASE(>     id serial NOT NULL,\nccc-asp-net-core-app::DATABASE(>     first_name character varying(50) NOT NULL,\nccc-asp-net-core-app::DATABASE(>     last_name character varying(50)  NOT NULL,\nccc-asp-net-core-app::DATABASE(>     blog_site_url character varying(200),\nccc-asp-net-core-app::DATABASE(>     birthday date,\nccc-asp-net-core-app::DATABASE(>     CONSTRAINT users_pkey PRIMARY KEY (id)\nccc-asp-net-core-app::DATABASE(> );\nCREATE TABLE\nccc-asp-net-core-app::DATABASE=> SELECT * FROM users;\n id | first_name | last_name | blog_site_url | birthday\n----+------------+-----------+---------------+----------\n(0 rows)\n\nccc-asp-net-core-app::DATABASE=> \\q\n\n\n\n$ heroku pg:psql\n--\x3e Connecting to postgresql-flat-70920\npsql (9.6.3, server 9.6.2)\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nccc-asp-net-core-app::DATABASE=> INSERT INTO public.users(\nccc-asp-net-core-app::DATABASE(>     first_name, last_name, blog_site_url, birthday)\nccc-asp-net-core-app::DATABASE-> VALUES\nccc-asp-net-core-app::DATABASE->   ('Alan', 'Jui', 'http://www.ccc99.tw', to_date('1960-09-25', 'YYYY-MM-DD')),\nccc-asp-net-core-app::DATABASE->   ('Stacy', 'Wu', '', to_date('1967-08-18', 'YYYY-MM-DD')),\nccc-asp-net-core-app::DATABASE->   ('Amos', 'Jui', '', to_date('2003-06-04', 'YYYY-MM-DD'));\nINSERT 0 3\nccc-asp-net-core-app::DATABASE=> SELECT * FROM public.users;\n id | first_name | last_name |    blog_site_url    |  birthday\n----+------------+-----------+---------------------+------------\n  1 | Alan       | Jui       | http://www.ccc99.tw | 1960-09-25\n  2 | Stacy      | Wu        |                     | 1967-08-18\n  3 | Amos       | Jui       |                     | 2003-06-04\n(3 rows)\n\nccc-asp-net-core-app::DATABASE=> \\q\n")])])]),n("p",[e._v("PUSH/PULL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('$ heroku pg:push mylocaldb postgresql-flat-70920\nheroku-cli: Pushing mylocaldb ---\x3e postgresql-flat-70920\npg_dump: [archiver (db)] connection to database "mylocaldb" failed: FATAL:  database "mylocaldb" does not exist\npg_restore: [archiver] input file is too short (read 0, expected 5)\n\n\n\n$ heroku pg:push AlanJui postgresql-flat-70920\nheroku-cli: Pushing AlanJui ---\x3e postgresql-flat-70920\npg_dump: last built-in OID is 16383\npg_dump: reading extensions\npg_dump: identifying extension members\npg_dump: reading schemas\npg_dump: reading user-defined tables\npg_dump: reading user-defined functions\npg_dump: reading user-defined types\npg_dump: reading procedural languages\npg_dump: reading user-defined aggregate functions\npg_dump: reading user-defined operators\npg_dump: reading user-defined access methods\npg_dump: reading user-defined operator classes\npg_dump: reading user-defined operator families\npg_dump: reading user-defined text search parsers\npg_dump: reading user-defined text search templates\npg_dump: reading user-defined text search dictionaries\npg_dump: reading user-defined text search configurations\npg_dump: reading user-defined foreign-data wrappers\npg_dump: reading user-defined foreign servers\npg_dump: reading default privileges\npg_dump: reading user-defined collations\npg_dump: reading user-defined conversions\npg_dump: reading type casts\npg_dump: reading transforms\npg_dump: reading table inheritance information\npg_dump: reading event triggers\npg_dump: finding extension tables\npg_dump: finding inheritance relationships\npg_dump: reading column info for interesting tables\npg_dump: finding the columns and types of table "public.users"\npg_dump: finding default expressions of table "public.users"\npg_dump: flagging inherited columns in subtables\npg_dump: reading indexes\npg_dump: reading indexes for table "public.users"\npg_dump: reading constraints\npg_dump: reading triggers\npg_dump: reading rewrite rules\npg_dump: reading policies\npg_dump: reading row security enabled for table "public.users_id_seq"\npg_dump: reading policies for table "public.users_id_seq"\npg_dump: reading row security enabled for table "public.users"\npg_dump: reading policies for table "public.users"\npg_dump: reading large objects\npg_dump: reading dependency data\npg_dump: saving encoding = UTF8\npg_dump: saving standard_conforming_strings = on\npg_dump: saving database definition\npg_dump: dumping contents of table "public.users"\npg_restore: connecting to database for restore\npg_restore: creating SCHEMA "public"\npg_restore: creating COMMENT "SCHEMA public"\npg_restore: creating EXTENSION "plpgsql"\npg_restore: creating COMMENT "EXTENSION plpgsql"\npg_restore: [archiver (db)] Error while PROCESSING TOC:\npg_restore: [archiver (db)] Error from TOC entry 2395; 0 0 COMMENT EXTENSION plpgsql\npg_restore: [archiver (db)] could not execute query: ERROR:  must be owner of extension plpgsql\n    Command was: COMMENT ON EXTENSION plpgsql IS \'PL/pgSQL procedural language\';\n\n\n\npg_restore: creating TABLE "public.users"\npg_restore: creating SEQUENCE "public.users_id_seq"\npg_restore: creating SEQUENCE OWNED BY "public.users_id_seq"\npg_restore: creating DEFAULT "public.users id"\npg_restore: processing data for table "public.users"\npg_restore: executing SEQUENCE SET users_id_seq\npg_restore: creating CONSTRAINT "public.users users_pkey"\npg_restore: setting owner and privileges for DATABASE "AlanJui"\npg_restore: setting owner and privileges for SCHEMA "public"\npg_restore: setting owner and privileges for COMMENT "SCHEMA public"\npg_restore: setting owner and privileges for EXTENSION "plpgsql"\npg_restore: setting owner and privileges for COMMENT "EXTENSION plpgsql"\npg_restore: setting owner and privileges for TABLE "public.users"\npg_restore: setting owner and privileges for SEQUENCE "public.users_id_seq"\npg_restore: setting owner and privileges for SEQUENCE OWNED BY "public.users_id_seq"\npg_restore: setting owner and privileges for DEFAULT "public.users id"\npg_restore: setting owner and privileges for TABLE DATA "public.users"\npg_restore: setting owner and privileges for SEQUENCE SET "public.users_id_seq"\npg_restore: setting owner and privileges for CONSTRAINT "public.users users_pkey"\nWARNING: errors ignored on restore: 1\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);