(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{525:function(s,t,n){"use strict";n.r(t);var e=n(10),a=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"納管設定檔-dotfiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#納管設定檔-dotfiles"}},[s._v("#")]),s._v(" 納管設定檔（dotfiles）")]),s._v(" "),t("p",[s._v("在 Mac OSX  或是 Ubuntu 作業系統，許多應用軟體的「設定檔」，如：VIM (.vimrc) 、ZSH (.zshrc) ，其「檔案名稱」均是以「點」開始；且都會存放在個人的 Home 目錄下（如： /home/alanjui/.zshrc ）。")]),s._v(" "),t("p",[s._v("由於這些「設定檔」，隨時會基於「某時的需求」，進行設定「變更」。也因此，可能會設定變更之後，原來正常的軟體，變得無法正常運作；或是變更之後反悔了，想要回復成先前的設定⋯⋯。")]),s._v(" "),t("p",[s._v("基於上述種種理由，這些設定檔也該進行「版本控管」。")]),s._v(" "),t("p",[s._v("只是⋯⋯，對於習慣用 git 進行檔案版本控管的人，會有一個大麻煩，那就是在個人的 Home 目錄下，常有一大堆的設定檔（dotfiles），可是，我們想真正想做版本控管的檔案卻僅只有幾個。那⋯⋯，這該怎麼辦呢？")]),s._v(" "),t("p",[s._v("這問題的「關鍵重點」在於：建立 git repo 時，使用 bare 選項，如：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ git init --bare $HOME/.dotfiles\n")])])]),t("h1",{attrs:{id:"在另一台電腦套用設定檔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在另一台電腦套用設定檔"}},[s._v("#")]),s._v(" 在另一台電腦套用設定檔")]),s._v(" "),t("h2",{attrs:{id:"首次設定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首次設定"}},[s._v("#")]),s._v(" 首次設定")]),s._v(" "),t("p",[t("strong",[s._v("（1）下載 Remote Git 容器")])]),s._v(" "),t("p",[s._v("【macOS】")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ git clone --bare https://gitlab.com/alanjui.1960/dotfiles.git $HOME/dotfiles\n\n$ git clone --bare git@gitlab.com:alanjui.1960/dotfiles.git $HOME/dotfiles\n")])])]),t("p",[s._v("【Ubuntu】")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ git clone --bare git@github.com:AlanJui/ubuntu-dotfiles.git $HOME/dotfiles\n\n\n\ngit clone --bare https://github.com/AlanJui/ubuntu-dotfiles.git $HOME/dotfiles\n")])])]),t("p",[t("strong",[s._v("（2）以別稱（alias）設定操作指令")])]),s._v(" "),t("p",[s._v("於 Shell 設定檔（如： ~/.zshrc、 ~/.bashrc 、 ~/.bash_profile ）加入「指令別稱設定」：dotfiles")]),s._v(" "),t("p",[s._v("$HOME/.zshrc")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("alias dotfiles='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'\n\n\n\n\n$ cd\n\n$ alias dotfiles='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'\n\n$ dotfiles config --local status.showUntrackedFiles no\n\n$ mkdir -p ~/dotfiles-backup\n\n$ dotfiles checkout 2>&1 | egrep \"\\s+\\.\" | awk {'print $1'} | xargs -I{} mv {} dotfiles-backup/{}\n\n$ cp ~/.zshrc ~/.zshrc.bak\n$ mv .config/Code/User/settings.json .config/Code/User/settings.json.bak\n\n$ dotfiles checkout\n")])])]),t("p",[t("strong",[s._v("（3）簽出各個 dotfiles 的實體檔案")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("source ~/.bashrc\ndotfiles checkout\n")])])]),t("h2",{attrs:{id:"強制更新到最新版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#強制更新到最新版"}},[s._v("#")]),s._v(" 強制更新到最新版")]),s._v(" "),t("p",[s._v("不管本機端 Git 容器內之檔案是否有變更（目錄路徑： ~/.dotfiles ），直接使用遠地端之 Git 容器覆寫。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("dotfiles reset --hard HEAD\ndotfiles pull \n")])])]),t("h1",{attrs:{id:"安裝-pyenv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安裝-pyenv"}},[s._v("#")]),s._v(" 安裝 pyenv")]),s._v(" "),t("p",[t("strong",[s._v("Install pyenv on mac")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ brew update\n$ brew install pyenv\n")])])]),t("p",[t("strong",[s._v("Install pyenv on Ubuntu")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n")])])]),t("p",[s._v("$HOME/.profile")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('export PYENV_ROOT=$(pyenv root)\nexport PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"\n\n\n$ source ~/.zshrc\n\n$ sudo apt install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n\n\n$ pyenv install 3.8.5\npython-build: use openssl@1.1 from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.8.5.tar.xz...\n-> https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tar.xz\nInstalling Python-3.8.5...\npython-build: use readline from homebrew\npython-build: use zlib from xcode sdk\nInstalled Python-3.8.5 to /Users/alanjui/.pyenv/versions/3.8.5\n\n\n$ pyenv versions\n* system (set by /Users/alanjui/.pyenv/version)\n  3.8.5\n\n$ pyenv global 3.8.5\n\n$ pyenv versions\n  system\n* 3.8.5 (set by /Users/alanjui/.pyenv/version)\n\n$ python --version\nPython 3.8.5\n\n$ pyenv which python\n/Users/alanjui/.pyenv/versions/3.8.5/bin/python\n\n\npip install --upgrade pip\npip install pipenv\n')])])]),t("p",[s._v("$HOME/.profile")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('#--------------------------------------------------------------------\n# pyenv\n#--------------------------------------------------------------------\n\n# export PYENV_ROOT="$HOME/.pyenv"\nexport PYENV_ROOT=$(pyenv root)\nexport PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"\n\nif command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\n  # eval "$(pyenv virtualenv-init -)"\nfi\n\n#--------------------------------------------------------------------\n# pipenv and autoenv\n#--------------------------------------------------------------------\n\n# Shell Ciompletion\neval "$(pipenv --completion)"\n\n# Use Vim with virtualenv\nif [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate" ]]; then\n  source "${VIRTUAL_ENV}/bin/activate"\nfi\n\n# Create VirtualEnvironment directory under Django Project Root\n# export PIPENV_VENV_IN_PROJECT=1\nexport PIPENV_VENV_IN_PROJECT="enabled"\n')])])]),t("h1",{attrs:{id:"安裝-zsh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安裝-zsh"}},[s._v("#")]),s._v(" 安裝 ZSH")]),s._v(" "),t("p",[s._v("Install ZSH")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('$ brew install zsh\n$ sudo sh -c "echo $(which zsh) >> /etc/shells" \n$ chsh -s $(which zsh)\n')])])]),t("p",[s._v("Install oh-my-zsh")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n')])])]),t("p",[s._v("Install Power Level 9K Theme")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ brew tap sambadevi/powerlevel9k\n$ brew install powerlevel9k\n\n\n\n$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n")])])]),t("p",[s._v("$HOME/.zshrc")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('export ZSH="/Users/alanjui/.oh-my-zsh"\n...\nZSH_THEME="powerlevel9k/powerlevel9k"\nsource /usr/local/opt/powerlevel9k/powerlevel9k.zsh-theme\n...\nsource $ZSH/oh-my-zsh.sh\n')])])]),t("h1",{attrs:{id:"設定-neovim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#設定-neovim"}},[s._v("#")]),s._v(" 設定 NeoVim")]),s._v(" "),t("h2",{attrs:{id:"安裝-nvim-需有的-python-套件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安裝-nvim-需有的-python-套件"}},[s._v("#")]),s._v(" 安裝 Nvim 需有的 Python 套件")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ pyenv version\n3.8.5 (set by /Users/alanjui/.pyenv/version)\n\n$ pyenv which python\n/Users/alanjui/.pyenv/versions/3.8.5/bin/python\n\n$ pip install pynvim\n")])])]),t("h2",{attrs:{id:"安裝需有的-node-js-套件-node-npm-yarn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安裝需有的-node-js-套件-node-npm-yarn"}},[s._v("#")]),s._v(" 安裝需有的 Node.js 套件： node + npm + yarn")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ curl -L https://git.io/n-install | bash\n\n$ npm --version\n6.14.6\n\n$ node --version\nv12.18.4\n\n\n\n$ npm install -g yarn\n/Users/alanjui/n/bin/yarn -> /Users/alanjui/n/lib/node_modules/yarn/bin/yarn.js\n/Users/alanjui/n/bin/yarnpkg -> /Users/alanjui/n/lib/node_modules/yarn/bin/yarn.js\n+ yarn@1.22.5\nadded 1 package in 0.432s\n")])])]),t("p",[s._v("Install neovim")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("yarn global add neovim\n")])])]),t("p",[s._v("Install clipboard support for Ubuntu")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ sudo apt install xsel\n")])])]),t("h2",{attrs:{id:"下載-vim-plug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下載-vim-plug"}},[s._v("#")]),s._v(" 下載 vim-plug")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("sh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n\n\n\n\n$ nvim\n:PlugInstall\n:UpdateRemotePlugins\n:checkhealth\n")])])]),t("h1",{attrs:{id:"設定-tmux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#設定-tmux"}},[s._v("#")]),s._v(" 設定 Tmux")]),s._v(" "),t("p",[s._v("Install tmux on Ubuntu")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("sudo apt install tmux\n")])])]),t("p",[s._v("使用 Oh my tmux")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("$ cd\n$ git clone https://github.com/gpakosz/.tmux.git\n$ ln -s -f .tmux/.tmux.conf\n$ cp .tmux/.tmux.conf.local .\n")])])]),t("p",[s._v("下載 tmux 的 session 管理 plugin")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n\n\n\ntmux\n")])])]),t("p",[t("strong",[s._v("Installing plugins")])]),s._v(" "),t("ol",[t("li",[s._v("Add new plugin to "),t("code",[s._v("~/.tmux.conf")]),s._v(" with "),t("code",[s._v("set -g @plugin '...'")])]),s._v(" "),t("li",[s._v("Press "),t("code",[s._v("prefix")]),s._v(" + I (capital i, as in "),t("strong",[s._v("I")]),s._v("nstall) to fetch the plugin.")])]),s._v(" "),t("p",[t("strong",[s._v("Named Session")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("tmux new -s session_name\n")])])]),t("p",[t("strong",[s._v("Detach")]),s._v(" "),t("strong",[s._v("[Ctrl-b]")]),s._v(" "),t("strong",[s._v("d")])]),s._v(" "),t("p",[t("strong",[s._v("List")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("tmux ls\n")])])]),t("p",[t("strong",[s._v("Attach")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("tmux attach-session -t number\n")])])]),t("p",[t("strong",[s._v("New Session")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("tmux new-session -d 'vim'\n")])])]),t("h1",{attrs:{id:"參考文檔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#參考文檔"}},[s._v("#")]),s._v(" 參考文檔")]),s._v(" "),t("h2",{attrs:{id:"解說參考文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解說參考文件"}},[s._v("#")]),s._v(" 解說參考文件")]),s._v(" "),t("p",[s._v("https://medium.com/toutsbrasil/how-to-manage-your-dotfiles-with-git-f7aeed8adf8b")]),s._v(" "),t("p",[s._v("原文章似有「打字錯誤」，對於以下這段的內容需進行修訂：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("echo \"alias dotfiles='/usr/bin/git --git-dir=$HOME/.cfg.dotfiles --work-tree=$HOME'\" >> $HOME/.bashrc\n")])])]),t("p",[s._v("另一篇參考文件： https://www.atlassian.com/git/tutorials/dotfiles")]),s._v(" "),t("h2",{attrs:{id:"解說及示範影片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解說及示範影片"}},[s._v("#")]),s._v(" 解說及示範影片")]),s._v(" "),t("p",[s._v("https://www.youtube.com/watch?v=tBoLDpTWVOM&&t=141s")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://youtu.be/tBoLDpTWVOM?t=141s",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://youtu.be/tBoLDpTWVOM?t=141s"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);